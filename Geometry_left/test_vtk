import vtk
from pathlib import Path


def scaleSTL(filenameSTL, opacity=0.75, scale=(1,1,1), trans=(0,0,0), mesh_color="gold"):
    colors = vtk.vtkNamedColors()

    reader = vtk.vtkSTLReader()
    reader.SetFileName(filenameSTL)
    reader.Update()
    vtkobj = reader.GetOutput()

    transform = vtk.vtkTransform()
    transform.Translate(trans)
    transform.Scale(scale)

    # transformFilter = vtk.vtkTransformPolyDataFilter()
    # transformFilter.SetInputConnection(reader.GetOutputPort())
    transformFilter = vtk.vtkTransformPolyDataFilter()
    transformFilter.SetInputData(reader.GetOutput())
    # transformFilter.SetTransform(transform)
    # transformFilter.Update()

    sim = vtk.vtkDecimatePro()
    sim.SetTargetReduction(5)
    sim.SetInputData(transformFilter.GetOutput())
    sim.PreserveTopologyOn()
    sim.SplittingOff()
    sim.BoundaryVertexDeletionOff()
    sim.Update()

    mapper = vtk.vtkPolyDataMapper()
    mapper.SetInputConnection(sim.GetOutputPort())

    actor = vtk.vtkActor()
    actor.SetMapper(mapper)
    actor.GetProperty().SetColor(colors.GetColor3d(mesh_color))
    actor.GetProperty().SetOpacity(opacity)

    return actor, transformFilter

def update(trans_filter, trans):
    transformFilter = trans_filter
    transform = vtk.vtkTransform()
    transform.Translate(trans)
    transformFilter.SetTransform(transform)
    transformFilter.Update()


def render_scene(my_actor_list):
    renderer = vtk.vtkRenderer()
    for arg in my_actor_list:
        renderer.AddActor(arg)
    namedColors = vtk.vtkNamedColors()
    renderer.SetBackground(namedColors.GetColor3d("SlateGray"))

    window = vtk.vtkRenderWindow()
    window.SetWindowName("Oriented Cylinder")
    window.AddRenderer(renderer)
    axes_actor = vtk.vtkAxesActor()
    axes_actor.AxisLabelsOff()
    renderer.AddActor(axes_actor)

    interactor = vtk.vtkRenderWindowInteractor()
    interactor.SetRenderWindow(window)

    # Visualize
    window.Render()
    interactor.Start()

import os.path

import vtk



def main(filePath, reduction, output_filename):
    # Define colors
    colors = vtk.vtkNamedColors()
    backFaceColor = colors.GetColor3d('Gold')
    inputActorColor = colors.GetColor3d('NavajoWhite')
    decimatedActorColor = colors.GetColor3d('NavajoWhite')
    # colors.SetColor('leftBkg', [0.6, 0.5, 0.4, 1.0])
    # colors.SetColor('rightBkg', [0.4, 0.5, 0.6, 1.0])

    if filePath and os.path.isfile(filePath):
        readerPD = ReadPolyData(filePath)
        triangles = vtk.vtkTriangleFilter()
        triangles.SetInputData(readerPD)
        triangles.Update()
        inputPolyData = triangles.GetOutput()

    print('Before decimation')
    print(f'There are {inputPolyData.GetNumberOfPoints()} points.')
    print(f'There are {inputPolyData.GetNumberOfPolys()} polygons.')

    # # decimate = vtk.vtkDecimatePro()
    # decimate = vtk.vtkQuadricDecimation()
    # decimate.SetInputData(inputPolyData)
    # decimate.SetTargetReduction(reduction)
    # # decimate.PreserveTopologyOn()
    # decimate.Update()
    from vtkmodules.vtkFiltersCore import (
        vtkDecimatePro,
    )
    decimate = vtkDecimatePro()
    decimate.SetInputData(inputPolyData)
    decimate.SetTargetReduction(reduction)
    # decimate.PreserveTopologyOn()
    decimate.Update()

    decimated = vtk.vtkPolyData()
    decimated.ShallowCopy(decimate.GetOutput())

    print('After decimation')
    print(f'There are {decimated.GetNumberOfPoints()} points.')
    print(f'There are {decimated.GetNumberOfPolys()} polygons.')
    print(
        f'Reduction: {(inputPolyData.GetNumberOfPolys() - decimated.GetNumberOfPolys()) / inputPolyData.GetNumberOfPolys()}')
    #
    # inputMapper = vtk.vtkPolyDataMapper()
    # inputMapper.SetInputData(inputPolyData)
    #
    # backFace = vtk.vtkProperty()
    # backFace.SetColor(backFaceColor)
    #
    # inputActor = vtk.vtkActor()
    # inputActor.SetMapper(inputMapper)
    # inputActor.GetProperty().SetInterpolationToFlat()
    # inputActor.GetProperty().SetColor(inputActorColor)
    # inputActor.SetBackfaceProperty(backFace)
    #
    # decimatedMapper = vtk.vtkPolyDataMapper()
    # decimatedMapper.SetInputData(decimated)
    #
    # decimatedActor = vtk.vtkActor()
    # decimatedActor.SetMapper(decimatedMapper)
    # decimatedActor.GetProperty().SetColor(decimatedActorColor)
    # decimatedActor.GetProperty().SetInterpolationToFlat()
    # decimatedActor.SetBackfaceProperty(backFace)


    writer = vtk.vtkXMLPolyDataWriter()
    writer.SetFileName(output_filename)
    writer.SetInputData(decimated)
    writer.SetDataModeToAscii()
    writer.Write()

    # # There will be one render window
    # renderWindow = vtk.vtkRenderWindow()
    # renderWindow.SetSize(600, 300)
    # renderWindow.SetWindowName('Decimation')
    #
    # # And one interactor
    # interactor = vtk.vtkRenderWindowInteractor()
    # interactor.SetRenderWindow(renderWindow)
    #
    # # Define viewport ranges
    # # (xmin, ymin, xmax, ymax)
    # leftViewport = [0.0, 0.0, 0.5, 1.0]
    # rightViewport = [0.5, 0.0, 1.0, 1.0]
    #
    # # Setup both renderers
    # leftRenderer = vtk.vtkRenderer()
    # renderWindow.AddRenderer(leftRenderer)
    # leftRenderer.SetViewport(leftViewport)
    # # leftRenderer.SetBackground((colors.GetColor3d('leftBkg')))
    # leftRenderer.SetBackground((colors.GetColor3d('Peru')))
    #
    # rightRenderer = vtk.vtkRenderer()
    # renderWindow.AddRenderer(rightRenderer)
    # rightRenderer.SetViewport(rightViewport)
    # # rightRenderer.SetBackground((colors.GetColor3d('rightBkg')))
    # rightRenderer.SetBackground((colors.GetColor3d('CornflowerBlue')))
    #
    # # Add the sphere to the left and the cube to the right
    # leftRenderer.AddActor(inputActor)
    # rightRenderer.AddActor(decimatedActor)
    #
    # # Shared camera
    # # Shared camera looking down the -y axis
    # camera = vtk.vtkCamera()
    # camera.SetPosition(0, -1, 0)
    # camera.SetFocalPoint(0, 0, 0)
    # camera.SetViewUp(0, 0, 1)
    # camera.Elevation(30)
    # camera.Azimuth(30)
    #
    # leftRenderer.SetActiveCamera(camera)
    # rightRenderer.SetActiveCamera(camera)
    #
    # leftRenderer.ResetCamera()
    # leftRenderer.ResetCameraClippingRange()
    #
    # renderWindow.Render()
    # renderWindow.SetWindowName('Decimation')
    #
    # interactor.Start()


def ReadPolyData(file_name):
    import os
    path, extension = os.path.splitext(file_name)
    extension = extension.lower()
    if extension == '.ply':
        reader = vtk.vtkPLYReader()
        reader.SetFileName(file_name)
        reader.Update()
        poly_data = reader.GetOutput()
    elif extension == '.vtp':
        reader = vtk.vtkXMLPolyDataReader()
        reader.SetFileName(file_name)
        reader.Update()
        poly_data = reader.GetOutput()
    elif extension == '.obj':
        reader = vtk.vtkOBJReader()
        reader.SetFileName(file_name)
        reader.Update()
        poly_data = reader.GetOutput()
    elif extension == '.stl':
        reader = vtk.vtkSTLReader()
        reader.SetFileName(file_name)
        reader.Update()
        poly_data = reader.GetOutput()
    elif extension == '.vtk':
        reader = vtk.vtkpoly_dataReader()
        reader.SetFileName(file_name)
        reader.Update()
        poly_data = reader.GetOutput()
    elif extension == '.g':
        reader = vtk.vtkBYUReader()
        reader.SetGeometryFileName(file_name)
        reader.Update()
        poly_data = reader.GetOutput()
    else:
        # Return a None if the extension is unknown.
        poly_data = None
    return poly_data


if __name__ == "__main__":
    mesh_list = ["ulna",]
    from pathlib import Path
    files = os.listdir(".")
    for file in files:
        if file == "test_vtk":
            continue
        if "decimate" in file:
            continue
        # scale01 = (1, 1, 1)
        # scale02 = (0.5, 0.5, 0.5)
        # my_list = []
        # actor0, transf0 = scaleSTL(filename, 0.75, scale01, (0,1,2),  "Gold")
        # actor1, tranf1 = scaleSTL(filename, 0.75, scale02, (0,0,0), "DarkGreen")
        # # my_list.append(scaleSTL(filename, 0.75, scale01, (0,1,2),  "Gold"))
        # # my_list.append(scaleSTL(filename, 0.75, scale02, (0,0,0), "DarkGreen"))
        # for i in range(5):
        #     update(transf0, (0, 1, i))
        #     update(tranf1, (0, 0, 0))
        #     render_scene([actor0, actor1])
        main(file, 0.7, output_filename=Path(file).stem + "_decimate.vtp")